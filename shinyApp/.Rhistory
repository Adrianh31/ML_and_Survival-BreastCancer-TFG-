return(probs_0)
}
else {
min_y=min(df.cts5$seguimiento_years)
max_y=max(df.cts5$seguimiento_years)
years=min_y:max_y
ia_years=vector()
tamoxifeno_years=vector()
tamoxifeno_ia_years=vector()
for(year in years) {
new_patient$seguimiento_years=year
probs_0=vector()
for (treatment in treatments) {
#asignar tratamiento
hormonoteraphy=treatment
new_patient$hormonoteraphy=hormonoteraphy
#predecit prob of no recurrence for each treatment
pred_0<-as.data.frame(h2o.predict(object=modelo, newdata=as.h2o(new_patient)))$p0
probs_0<-c(probs_0, pred_0)
}
ia_years<-c(ia_years, probs_0[1])
tamoxifeno_years<-c(tamoxifeno_years, probs_0[2])
tamoxifeno_ia_years<-c(tamoxifeno_ia_years, probs_0[3])
}
plot(years ,ia_years, type="l", lwd=3, pch=10, col="turquoise3", xlab="Years", ylab="Survival probability")
lines(years, tamoxifeno_years,type="l", lwd=3, pch=10, col="seagreen3")
lines(years, tamoxifeno_ia_years,type="l", lwd=3, pch=10, col="slateblue")
legend("topright", legend=c("IA","Tamoxifeno", "Tamoxifeno-IA"),  col=c("turquoise3","seagreen3","slateblue"), cex=0.8, lty=1)
}
}
load(file="/Users/nairachiclana/Google Drive/TFG/FEATURES/h2o/modelos_tcga.RData")
modelo_tcga=h2o.loadModel(tcga_model_path_XGBoost)
load(file="/Users/nairachiclana/Google Drive/TFG/FEATURES/h2o/modelos_b_cts5.RData")
modelo_cts5=h2o.loadModel(cts5_b_model_path_DL)
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
str(df.tcga)
levels(df.tcga$subtipo_bc)
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
knitr::opts_chunk$set(echo = TRUE)
df.cts5<-read.csv("/Users/nairachiclana/Google Drive/TFG/FEATURES/datasets/choosen_cts5.csv", dec=",", header=T)
df.cts5<-as.data.frame(df.cts5[, !names(df.cts5) %in% c("X")])
df.cts5$seguimiento_years<-as.numeric(as.character(df.cts5$seguimiento_years))
str(df.cts5)
df.tcga<-read.csv("/Users/nairachiclana/Google Drive/TFG/FEATURES/datasets/choosen_tcga.csv", dec=",", header=T)
df.tcga<-as.data.frame(df.tcga[, !names(df.tcga) %in% c("X")])
df.tcga$seguimiento_years<-as.numeric(as.character(df.tcga$seguimiento_years))
str(df.tcga)
df.cts5$seguimiento_years<-round(df.cts5$seguimiento_years*12)
colnames(df.cts5)[which(names(df.cts5)=="seguimiento_years")] <- "seguimiento_months"
df.cts5 <-df.cts5[order(df.cts5$seguimiento_months),]
df.tcga$seguimiento_years<-round(df.tcga$seguimiento_years*12)
colnames(df.tcga)[which(names(df.tcga)=="seguimiento_years")] <- "seguimiento_months"
df.tcga <-df.tcga[order(df.tcga$seguimiento_months),]
library(FSelector)
library(dplyr)
library(KMsurv)
library(survMisc)
library(survminer)
library(mlr)
library(caret)
#For survival learners
library(party)
library(CoxBoost)
library(glmnet)
library(mboost)
#For classification learners
library(bartMachine)
library(stats)
library(C50)
'%ni%' <- Negate('%in%')
load(file="/Users/nairachiclana/Google Drive/TFG/FEATURES/rdata/replicated_df.RData")
dim(df.cts5)
dim(replicated.cts5)
dim(df.tcga)
dim(replicated.tcga)
print.distributions<-function(df, replicated.df) {
cols<-colnames(df)[colnames(df) %ni% c("seguimiento_months")]
for (col in cols) {
cat(col, "Original \n")
print(prop.table(table(df[,col])))
cat(col,"Replicado \n")
print(prop.table(table(replicated.df[,col])))
cat("\n")
}
}
load(file="/Users/nairachiclana/Google Drive/TFG/FEATURES/rdata/replicated_big_df.RData")
months_to_years<-function(df) {
if("seguimiento_years" %ni% colnames(df)) {
df$seguimiento_years<-round(df$seguimiento_months/12)
df<-df[, !names(df) %in% c("seguimiento_months")]
df <-df[order(df$seguimiento_years),]
}
return(df)
}
df.cts5<-months_to_years(df.cts5)
replicated.cts5<-months_to_years(replicated.cts5)
replicated_big.cts5<-months_to_years(replicated_big.cts5)
df.tcga<-months_to_years(df.tcga)
replicated.tcga<-months_to_years(replicated.tcga)
replicated_big.tcga<-months_to_years(replicated_big.tcga)
dim(df.cts5)
dim(replicated_big.cts5)
dim(df.tcga)
dim(replicated_big.tcga)
par(mfrow=c(1,3))
hist(df.cts5$seguimiento_years)
hist(replicated.cts5$seguimiento_years)
hist(replicated_big.cts5$seguimiento_years)
par(mfrow=c(1,3))
hist(df.tcga$seguimiento_years)
hist(replicated.tcga$seguimiento_years)
hist(replicated_big.tcga$seguimiento_years)
replicated.cts5$evento<-as.numeric(as.character(replicated.cts5$evento))
replicated.tcga$evento<-as.numeric(as.character(replicated.tcga$evento))
indices_train<-createDataPartition(replicated.cts5$evento, p = 0.8)[[1]]
cts5_train<-replicated.cts5[indices_train,]
cts5_test<-replicated.cts5[-indices_train,]
cts5_train$evento<-as.numeric(as.character(cts5_train$evento))
cts5_test$evento<-as.numeric(as.character(cts5_test$evento))
write.csv(replicated.cts5, file="/Users/nairachiclana/Google Drive/TFG/FEATURES/datasets/replicated_cts5.csv")
write.csv(replicated.tcga, file="/Users/nairachiclana/Google Drive/TFG/FEATURES/datasets/replicated_tcga.csv")
indices_train<-createDataPartition(replicated.tcga$evento, p = 0.8)[[1]]
tcga_train<-replicated.tcga[indices_train,]
tcga_test<-replicated.tcga[-indices_train,]
tcga_train$evento<-as.numeric(as.character(tcga_train$evento))
tcga_test$evento<-as.numeric(as.character(tcga_test$evento))
cts5_task<-makeSurvTask(data=data.frame(replicated.cts5),target=c("seguimiento_years","evento"))
cts5_train_task<-makeSurvTask(data=data.frame(tcga_train),target=c("seguimiento_years","evento"))
cts5_test_task<-makeSurvTask(data=data.frame(tcga_test),target=c("seguimiento_years", "evento"))
tcga_task<-makeSurvTask(data=data.frame(replicated.tcga),target=c("seguimiento_years","evento"))
tcga_train_task<-makeSurvTask(data=data.frame(cts5_train),target=c("seguimiento_years","evento"))
tcga_test_task<-makeSurvTask(data=data.frame(cts5_test),target=c("seguimiento_years", "evento"))
surv_lrns=listLearners("surv")
surv_lrns[c("class", "package", "prob")]
learner_cox<-makeLearner("surv.coxph", fix.factors.prediction=TRUE)
learner_cox_coxboost<-makeLearner("surv.CoxBoost", fix.factors.prediction=TRUE)
learner_cox_cvboost<-makeLearner("surv.cv.CoxBoost", fix.factors.prediction=TRUE)
learner_cox_glm<-makeLearner("surv.cvglmnet", fix.factors.prediction=TRUE)
rdesc<-makeResampleDesc("CV", iters=5, stratify=TRUE)
#Evento as factor
replicated.cts5_factor<-replicated.cts5
replicated.cts5_factor$evento=as.factor(replicated.cts5_factor$evento)
cts5_train_factor=cts5_train
cts5_train_factor$evento=as.factor(cts5_train_factor$evento)
cts5_test_factor=cts5_test
cts5_test_factor$evento=as.factor(cts5_test_factor$evento)
cts5_task_classif<-makeClassifTask(data=data.frame(replicated.cts5_factor), target="evento", positive=0)
cts5_train_task_classif<-makeClassifTask(data=data.frame(cts5_train_factor), target="evento", positive=0)
cts5_test_task_classif<-makeClassifTask(data=data.frame(cts5_test_factor), target="evento", positive=0)
#Evento as factor
replicated.tcga_factor<-replicated.tcga
replicated.tcga_factor$evento=as.factor(replicated.tcga_factor$evento)
tcga_train_factor=tcga_train
tcga_train_factor$evento=as.factor(tcga_train_factor$evento)
tcga_test_factor=tcga_test
tcga_test_factor$evento=as.factor(tcga_test_factor$evento)
tcga_task_classif<-makeClassifTask(data=data.frame(replicated.tcga_factor), target="evento", positive=0)
tcga_train_task_classif<-makeClassifTask(data=data.frame(tcga_train_factor), target="evento", positive=0)
tcga_test_task_classif<-makeClassifTask(data=data.frame(tcga_test_factor), target="evento", positive=0)
prob_lrns=listLearners(properties="prob")
prob_lrns[c("class", "package")]
learner_adaboost<-makeLearner("classif.adaboostm1",  predict.type = "prob", fix.factors.prediction=TRUE)
learner_bartmachine<-makeLearner("classif.bartMachine", predict.type = "prob", fix.factors.prediction=TRUE)
learner_binomial<-makeLearner("classif.binomial", predict.type = "prob", fix.factors.prediction=TRUE)
learner_boosting<-makeLearner("classif.boosting", predict.type = "prob", fix.factors.prediction=TRUE)
rdesc<-makeResampleDesc("CV", iters=5, stratify=TRUE) #el mismo de antes
library(h2o)
h2o.init()
# For binary classification, response should be a factor
cts5_train_h2o=as.h2o(cts5_train_factor)
cts5_test_h2o=as.h2o(cts5_test_factor)
tcga_train_h2o=as.h2o(tcga_train_factor)
tcga_test_h2o=as.h2o(tcga_test_factor)
load(file="/Users/nairachiclana/Google Drive/TFG/FEATURES/h2o/modelos_tcga.RData")
modelo_tcga=h2o.loadModel(tcga_model_path_XGBoost)
load(file="/Users/nairachiclana/Google Drive/TFG/FEATURES/h2o/modelos_b_cts5.RData")
modelo_cts5=h2o.loadModel(cts5_b_model_path_DL)
#predecir y sacar prediciones
prediction_evento_cts5<-predict(modelo_cts5, as.h2o(replicated.cts5_factor))
predicted_evento_cts5=as.data.frame(prediction_evento_cts5)$predict
prediction_evento_tcga<-predict(modelo_tcga, as.h2o(replicated.tcga_factor))
predicted_evento_tcga=as.data.frame(prediction_evento_tcga)$predict
#comparar
table(replicated.cts5_factor$evento)
table(predicted_evento_cts5)
table(replicated.tcga_factor$evento)
table(predicted_evento_tcga)
#crear dataset con evento predecido
df_cts5_predicted=replicated.cts5_factor
df_cts5_predicted$evento=as.numeric(as.character(predicted_evento_cts5))
df_tcga_predicted=replicated.tcga_factor
df_tcga_predicted$evento=as.numeric(as.character(predicted_evento_tcga))
create_curves<-function(surv.original,surv.df_replicado, surv.df_predecido) {
splots<-list()
splots[[1]]<-ggsurvplot(surv.original, conf.int = TRUE, censor= TRUE, cex.axis=3, cex.lab=3.0, main="Real Survival curve", pval=TRUE)
splots_2<-list()
splots_2[[1]]<-ggsurvplot(surv.df_replicado, conf.int = TRUE, censor= TRUE, cex.axis=3, cex.lab=3.0, main="Real replicated dataset survival curve", pval=TRUE)
splots_2[[2]]<-ggsurvplot(surv.df_predecido, conf.int = TRUE, censor= TRUE, cex.axis=3, cex.lab=3.0, main="Predicted dataset survival curve",  palette = "Dark2", pval=TRUE)
arrange_ggsurvplots(splots, print = TRUE, ncol =1, nrow = 1, risk.table.height = 1)
arrange_ggsurvplots(splots_2, print = TRUE, ncol =2, nrow = 1, risk.table.height = 1)
}
surv.original<-survfit(Surv(seguimiento_years, evento)~1, data=df.cts5)
surv.original
surv.df_replicado<-survfit(Surv(seguimiento_years, evento)~1, data=replicated.cts5)
surv.df_replicado
surv.df_predecido<-survfit(Surv(seguimiento_years, evento)~1, data=df_cts5_predicted)
surv.df_predecido
create_curves(surv.original,surv.df_replicado, surv.df_predecido)
trainTask_WS <- makeClassifTask(data=replicated.cts5_factor, target="evento", positive=0)
trainTask <- normalizeFeatures(trainTask_WS,method = "standardize")
fv2=generateFilterValuesData(trainTask, method = c("chi.squared", "gain.ratio", "information.gain"))
plotFilterValues( fv2,n.show = ncol(df.cts5))
surv.original<-survfit(Surv(seguimiento_years, evento)~gg_extraidos_hier_k4, data=df.cts5)
surv.original
surv.df_replicado<-survfit(Surv(seguimiento_years, evento)~gg_extraidos_hier_k4, data=replicated.cts5)
surv.df_replicado
surv.df_predecido<-survfit(Surv(seguimiento_years, evento)~gg_extraidos_hier_k4, data=df_cts5_predicted)
surv.df_predecido
create_curves(surv.original,surv.df_replicado, surv.df_predecido)
surv.original<-survfit(Surv(seguimiento_years, evento)~nodal_status_hier_k3, data=df.cts5)
surv.original
surv.df_replicado<-survfit(Surv(seguimiento_years, evento)~nodal_status_hier_k3, data=replicated.cts5)
surv.df_replicado
surv.df_predecido<-survfit(Surv(seguimiento_years, evento)~nodal_status_hier_k3, data=df_cts5_predicted)
surv.df_predecido
create_curves(surv.original,surv.df_replicado, surv.df_predecido)
surv.original<-survfit(Surv(seguimiento_years, evento)~riesgo, data=df.cts5)
surv.original
surv.df_replicado<-survfit(Surv(seguimiento_years, evento)~riesgo, data=replicated.cts5)
surv.df_replicado
surv.df_predecido<-survfit(Surv(seguimiento_years, evento)~riesgo, data=df_cts5_predicted)
surv.df_predecido
create_curves(surv.original,surv.df_replicado, surv.df_predecido)
surv.original<-survfit(Surv(seguimiento_years, evento)~hormonoteraphy, data=df.cts5)
surv.original
surv.df_replicado<-survfit(Surv(seguimiento_years, evento)~hormonoteraphy, data=replicated.cts5)
surv.df_replicado
surv.df_predecido<-survfit(Surv(seguimiento_years, evento)~hormonoteraphy, data=df_cts5_predicted)
surv.df_predecido
create_curves(surv.original,surv.df_replicado, surv.df_predecido)
surv.original<-survfit(Surv(seguimiento_years, evento)~1, data=df.tcga)
surv.original
surv.df_replicado<-survfit(Surv(seguimiento_years, evento)~1, data=replicated.tcga)
surv.df_replicado
surv.df_predecido<-survfit(Surv(seguimiento_years, evento)~1, data=df_tcga_predicted)
surv.df_predecido
create_curves(surv.original,surv.df_replicado, surv.df_predecido)
trainTask_WS <- makeClassifTask(data=replicated.tcga_factor, target="evento", positive=0)
trainTask <- normalizeFeatures(trainTask_WS,method = "standardize")
fv2=generateFilterValuesData(trainTask, method = c("chi.squared", "gain.ratio", "information.gain"))
plotFilterValues( fv2,n.show = ncol(df.tcga))
surv.original<-survfit(Surv(seguimiento_years, evento)~edad_Kmeans_k3, data=df.tcga)
surv.original
surv.df_replicado<-survfit(Surv(seguimiento_years, evento)~edad_Kmeans_k3, data=replicated.tcga)
surv.df_replicado
surv.df_predecido<-survfit(Surv(seguimiento_years, evento)~edad_Kmeans_k3, data=df_tcga_predicted)
surv.df_predecido
create_curves(surv.original,surv.df_replicado, surv.df_predecido)
surv.original<-survfit(Surv(seguimiento_years, evento)~tumor_stage, data=df.tcga)
surv.original
surv.df_replicado<-survfit(Surv(seguimiento_years, evento)~tumor_stage, data=replicated.tcga)
surv.df_replicado
surv.df_predecido<-survfit(Surv(seguimiento_years, evento)~tumor_stage, data=df_tcga_predicted)
surv.df_predecido
create_curves(surv.original,surv.df_replicado, surv.df_predecido)
surv.original<-survfit(Surv(seguimiento_years, evento)~estado_menop, data=df.tcga)
surv.original
surv.df_replicado<-survfit(Surv(seguimiento_years, evento)~estado_menop, data=replicated.tcga)
surv.df_replicado
surv.df_predecido<-survfit(Surv(seguimiento_years, evento)~estado_menop, data=df_tcga_predicted)
surv.df_predecido
create_curves(surv.original,surv.df_replicado, surv.df_predecido)
surv.original<-survfit(Surv(seguimiento_years, evento)~nodal_status_k3_neg, data=df.tcga)
surv.original
surv.df_replicado<-survfit(Surv(seguimiento_years, evento)~nodal_status_k3_neg, data=replicated.tcga)
surv.df_replicado
surv.df_predecido<-survfit(Surv(seguimiento_years, evento)~nodal_status_k3_neg, data=df_tcga_predicted)
surv.df_predecido
create_curves(surv.original,surv.df_replicado, surv.df_predecido)
treatments<-c("IA", "TAMOXIFENO","TAMOXIFENO-IA")
predict_survival_horm<-function(new_patient, modelo, t_fijo) {
probs_0=vector()
new_patient=as.data.frame(t(new_patient))
colnames(new_patient)=colnames(df.cts5)[ !colnames(df.cts5)==c("evento")]
new_patient$seguimiento_years<-as.numeric(as.character(new_patient$seguimiento_years))
if (t_fijo==TRUE) {
for (treatment in treatments) {
#asignar tratamiento
hormonoteraphy=treatment
new_patient$hormonoteraphy=hormonoteraphy
#predecit prob of no recurrence for each treatment
pred_0<-as.data.frame(h2o.predict(object=modelo, newdata=as.h2o(new_patient)))$p0
probs_0<-c(probs_0, pred_0)
}
names(probs_0)=treatments
probs_0
return(probs_0)
}
else {
min_y=min(df.cts5$seguimiento_years)
max_y=max(df.cts5$seguimiento_years)
years=min_y:max_y
ia_years=vector()
tamoxifeno_years=vector()
tamoxifeno_ia_years=vector()
for(year in years) {
new_patient$seguimiento_years=year
probs_0=vector()
for (treatment in treatments) {
#asignar tratamiento
hormonoteraphy=treatment
new_patient$hormonoteraphy=hormonoteraphy
#predecit prob of no recurrence for each treatment
pred_0<-as.data.frame(h2o.predict(object=modelo, newdata=as.h2o(new_patient)))$p0
probs_0<-c(probs_0, pred_0)
}
ia_years<-c(ia_years, probs_0[1])
tamoxifeno_years<-c(tamoxifeno_years, probs_0[2])
tamoxifeno_ia_years<-c(tamoxifeno_ia_years, probs_0[3])
}
plot(years ,ia_years, type="l", lwd=3, pch=10, col="turquoise3", xlab="Years", ylab="Survival probability")
lines(years, tamoxifeno_years,type="l", lwd=3, pch=10, col="seagreen3")
lines(years, tamoxifeno_ia_years,type="l", lwd=3, pch=10, col="slateblue")
legend("topright", legend=c("IA","Tamoxifeno", "Tamoxifeno-IA"),  col=c("turquoise3","seagreen3","slateblue"), cex=0.8, lty=1)
}
}
#create patient
estado_menop="Premenopausica"
subtipo_bc_Nuria.ki67="Luminal_A"
riesgo="ALTO"
tumor_size_group_paper_score="(20,30]"
ki67_status_paper_score="Borderline"
hormone_receptor="Estrogen-and-Progesterone-receptor-positive"
edad_Kmeans_k4="(0,44]"
nodal_status_hier_k3="(0,10]"
gg_extraidos_hier_k4="(11,17]"
t_prob=4
hormonoteraphy="dummy"
#colnames
new_patient=c(estado_menop,subtipo_bc_Nuria.ki67, riesgo,hormonoteraphy, tumor_size_group_paper_score,ki67_status_paper_score,hormone_receptor,edad_Kmeans_k4,nodal_status_hier_k3, gg_extraidos_hier_k4, t_prob)
#debug(predict_survival_horm)
plot=predict_survival_horm(new_patient, modelo_cts5, F)
save(df.tcga, df.cts5, file="/Users/nairachiclana/Google Drive/TFG/FEATURES/datasets/df_tcga_cts5.RData")
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
years=1:12
predictions
years=1:3
years
pred=c(0.1, 0.2, 0.7)
pred
as.data.frame(years, pred)
cbind(years.pred)
cbind(years, pred)
as.data.frame( cbind(years, pred))
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
v1=c(1,2,3)
v2=c(a,b,c)
v2=c("a","b","c")
v3=c(3,4,5)
df_cts5_plot=as.data.frame(cbind(v1,v2,v3))
df_cts5_plot
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
dummy<-c(0.9935131, 0.9925750 ,0.9910836, 0.9885683, 0)
dummy
round(dummy,2)
round(dummy,1)
round(dummy,2)
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
df_cts5_plot
t(df_cts5_plot)
as.data.frame(t(df_cts5_plot))
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
install.packages("gather")
install.packages("tdyr")
install.packages("tidyr")
library(tidyr)
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
remove.packages(tidyr)
install.packages("tidyr")
library(tidyr)
install.packages("tidyr")
install.packages("tidyr")
library("tidyr")
remove.packages("tidyt")
remove.packages("tidyr")
library("tidyr")
install.packages("tidyr")
install.packages("tidyr")
library("tidyr")
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
data
data_matrix
ia_years
tamoxifeno_years
tamoxifeno_ia_years
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
data_matrix
ia_years
tamoxifeno_years
tamoxifeno_ia_years
probs_0
probs_0
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
data_matrix
ia_years
tamoxifeno_years
Q
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
ia_years
tamoxifeno_years
tamoxifeno_ia_years
new_patient_cts5
ia_years
tamoxifeno_years
tamoxifeno_ia_years
©
new_patient_cts5
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-movie-with-db')
runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-survival')
shiny::runApp('Google Drive/TFG/FEATURES/shiny_app/shiny-survival')
